USE [EDW]
GO
/****** Object:  StoredProcedure [Customer].[Load_Product]    Script Date: 9/04/2021 2:33:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/***************************************************************************************************************************************************
Name:		[Customer].[Load_Product]

Description:	Load staged data in Customer.Product to the Customer.Product table proper.
				Action Column: not specified
				Update Lineage: Yes 

UNMODIFIED AUTO-GEN (remove this line if code has been customised since it was generated to protect your changes from accidental over-write)

EXEC ETL28GenerateLoadTSQL
	 @vstrSchemaName='Customer', 
	 @vstrEntityNamePattern='Product', 
	 @vstrStageTableSchema='Customer', 
	 @vstrStageTablePrefix='Stage', 
	 @vblnUseETLColumnsFlag=1, 
	 @vstrActionColumnName=NULL,
	 @vblnIsSCD2=0, 
	 @vstrAuthor='VBhosle',
	 @vstrTargetSchema='Customer';

The following tables are (potentially) updated by this procedure:
	 - [Customer].[StageProduct]
	 - [Customer].[Product]

Parameters: 
		@ETLExecutionID - identifier for the ETL process instance that called this S-Proc (used for logging and data lineage)
		@vblnPerformFullExtract - Flag indicating whether a FULL or incremental extract is being performed
									(a FULL Extract includes DELETING target records not found in the stage table - normally only applicable for SCD-1 targets)

Modification History:
-----------------------------------------------------------------------------------------------------------------------------------------------------
Version	Date		Name				Modification
-----------------------------------------------------------------------------------------------------------------------------------------------------
1.0		22Nov2019	VBhosle		Initial Version (auto-generated via ETL28GenerateLoadTSQL)
****************************************************************************************************************************************************/
ALTER PROCEDURE [Customer].[Load_Product] (@ETLExecutionID uniqueidentifier, @vblnPerformFullExtract bit = 0) AS
BEGIN
	SET NOCOUNT ON;

	DECLARE 
		@ErrorNumber int,
		@ErrorSeverity int,  
		@ErrorState int,
		@ErrorProcedure varchar(128),
		@ErrorLine int,
		@ErrorMessage nvarchar(2000),
		@ErrorString nvarchar(3000);

	BEGIN TRANSACTION;

	BEGIN TRY
		--=================================================================================================
		-- Handle DELETE(s) first
		--=================================================================================================
		MERGE [Customer].[Product] as T
		USING [Customer].[Stage_Product] as S
			ON T.[ProductCategory] = S.[ProductCategory]
			AND T.[ProductType] = S.[ProductType]
			AND T.[ProductSubType] = S.[ProductSubType]
		WHEN NOT MATCHED BY SOURCE AND @vblnPerformFullExtract = 1 THEN DELETE;

		--=================================================================================================
		-- Handle INSERT-UPDATE with a single MERGE (Incremental & Full-Extract handled the same)
		--=================================================================================================
		MERGE [Customer].[Product] as T
		USING [Customer].[Stage_Product] as S
			ON T.[ProductCategory] = S.[ProductCategory]
			AND T.[ProductType] = S.[ProductType]
			AND T.[ProductSubType] = S.[ProductSubType]

		WHEN NOT MATCHED BY TARGET THEN
		INSERT (
			[ProductCategory]
			,[ProductType]
			,[ProductSubType]
			,[ETLSource]
			,[ETLSourceUpdated]
			,[ETLIsInferredMember]
			,[ETLCreated]
			,[ETLCreatedExecutionID]
			,[ETLUpdated]
			,[ETLUpdatedExecutionID]
		)
		VALUES (
			S.[ProductCategory]
			,S.[ProductType]
			,S.[ProductSubType]
			,S.[ETLSource]
			,S.[ETLSourceUpdated]
			,0
			,SYSDATETIME()
			,@ETLExecutionID
			,SYSDATETIME()
			,@ETLExecutionID
		)
	
		WHEN MATCHED
			AND NOT EXISTS (
				SELECT
					T.[ProductCategory],T.[ProductType],T.[ProductSubType],T.[ETLSource],T.[ETLSourceUpdated]
				INTERSECT
				SELECT
					S.[ProductCategory],S.[ProductType],S.[ProductSubType],S.[ETLSource],S.[ETLSourceUpdated]
			) THEN	-- i.e. at least one source payload column value does not match target (intersect also handles "<null> comparisons")

			UPDATE SET 
				T.[ProductCategory] = S.[ProductCategory]
				,T.[ProductType] = S.[ProductType]
				,T.[ProductSubType] = S.[ProductSubType]
				,T.[ETLSource] = S.[ETLSource]
				,T.[ETLSourceUpdated] = S.[ETLSourceUpdated]
				,T.[ETLIsInferredMember] = 0
				,T.[ETLUpdated] = SYSDATETIME()
				,T.[ETLUpdatedExecutionID] = @ETLExecutionID;

		IF @@TRANCOUNT > 0
		BEGIN
			COMMIT TRANSACTION;
		END
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		SELECT  
			@ErrorNumber		= ERROR_NUMBER() 
			,@ErrorSeverity		= ERROR_SEVERITY() 
			,@ErrorState		= ERROR_STATE()   
			,@ErrorProcedure	= ERROR_PROCEDURE()   
			,@ErrorLine			= ERROR_LINE() 
			,@ErrorMessage		= ERROR_MESSAGE() 

		SET @ErrorString = @ErrorMessage + ' at line ' + CONVERT (NVARCHAR, @ErrorLine) + ' in ' + @ErrorProcedure;
		RAISERROR (@ErrorString,  @ErrorSeverity, 1);
	END CATCH
	--=================================================================================================
	
	RETURN (@ErrorNumber);
END
